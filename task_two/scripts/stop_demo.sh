#!/bin/bash

# ================================================================
# –û–°–¢–ê–ù–û–í–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–î–ê–ù–ò–Ø 2
# ================================================================

echo "================================================================"
echo "        –û–°–¢–ê–ù–û–í–ö–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–î–ê–ù–ò–Ø 2"
echo "================================================================"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Python consumer –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
if [ -f ".consumer_pid" ]; then
    CONSUMER_PID=$(cat .consumer_pid)
    if ps -p $CONSUMER_PID > /dev/null 2>&1; then
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Python consumer (PID: $CONSUMER_PID)..."
        kill $CONSUMER_PID
        echo "‚úÖ Python consumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ÑπÔ∏è  Python consumer —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    rm -f .consumer_pid
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
docker compose down --volumes --remove-orphans

echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)..."
read -p "–£–¥–∞–ª–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker compose down --rmi all --volumes --remove-orphans
    echo "‚úÖ Docker –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã"
fi

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤..."
rm -f python/consumer.log
rm -f python/producer.log

echo ""
echo "================================================================"
echo "        –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê"
echo "================================================================"
echo ""
echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
echo "‚úÖ Volumes —É–¥–∞–ª–µ–Ω—ã"
echo "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
echo ""
echo "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: ./demo_task2.sh" 