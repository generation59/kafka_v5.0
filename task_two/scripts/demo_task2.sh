#!/bin/bash

# ================================================================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–Ø 2: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø KAFKA + APACHE NIFI
# ================================================================

echo "================================================================"
echo "        –ó–ê–î–ê–ù–ò–ï 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Kafka —Å Apache NiFi"
echo "================================================================"
echo ""
echo "üìã –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:"
echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Apache NiFi + Kafka –∫–ª–∞—Å—Ç–µ—Ä–∞"
echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É NiFi –∏ Kafka"
echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ NiFi Flow"
echo "‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"
echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop"
    exit 1
fi

if ! docker compose version &> /dev/null; then
    echo "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose"
    exit 1
fi

echo "================================================================"
echo "        1. –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í"
echo "================================================================"

echo "üöÄ –ó–∞–ø—É—Å–∫ Docker Compose —Å –ø–æ–ª–Ω—ã–º —Å—Ç–µ–∫–æ–º..."
docker compose down --volumes --remove-orphans 2>/dev/null || true

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
docker compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "   - Kafka –∫–ª–∞—Å—Ç–µ—Ä (3 –±—Ä–æ–∫–µ—Ä–∞)"
echo "   - Apache NiFi"
echo "   - Schema Registry"
echo "   - Kafka UI"
echo "   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤"
echo ""

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤..."
sleep 70

echo "================================================================"
echo "        2. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ò–°–û–í"
echo "================================================================"

echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose ps

echo ""
echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
echo "   - Apache NiFi:    http://localhost:8080 (admin/ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB)"
echo "   - Kafka UI:       http://localhost:8082"
echo "   - Schema Registry: http://localhost:8081"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"

# Kafka
echo -n "   Kafka –∫–ª–∞—Å—Ç–µ—Ä: "
if docker exec kafka-broker-1 kafka-topics --bootstrap-server localhost:9092 --list &>/dev/null; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# NiFi
echo -n "   Apache NiFi: "
if curl -s http://localhost:8080/nifi > /dev/null; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# Schema Registry
echo -n "   Schema Registry: "
if curl -s http://localhost:8081/subjects > /dev/null; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""

echo "================================================================"
echo "        3. –ü–†–û–í–ï–†–ö–ê –¢–û–ü–ò–ö–û–í KAFKA"
echo "================================================================"

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ kafka-init:"
docker logs kafka-init --tail 10

echo ""
echo "üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤:"
docker exec kafka-broker-1 kafka-topics --bootstrap-server localhost:9092 --list

echo ""
echo "üìä –î–µ—Ç–∞–ª–∏ —Ç–æ–ø–∏–∫–∞ user-events:"
if docker exec kafka-broker-1 kafka-topics --bootstrap-server localhost:9092 --describe --topic user-events 2>/dev/null; then
    echo "‚úÖ –¢–æ–ø–∏–∫ user-events –Ω–∞–π–¥–µ–Ω"
else
    echo "‚ùå –¢–æ–ø–∏–∫ user-events –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é..."
    docker exec kafka-broker-1 kafka-topics --bootstrap-server localhost:9092 --create --topic user-events --partitions 3 --replication-factor 3 --if-not-exists
    docker exec kafka-broker-1 kafka-topics --bootstrap-server localhost:9092 --create --topic processed-events --partitions 3 --replication-factor 3 --if-not-exists
    docker exec kafka-broker-1 kafka-topics --bootstrap-server localhost:9092 --create --topic analytics-events --partitions 3 --replication-factor 3 --if-not-exists
    echo "‚úÖ –¢–æ–ø–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é"
fi

echo ""

echo "================================================================"
echo "        4. –ó–ê–ü–£–°–ö PYTHON CONSUMER (—Ñ–æ–Ω–æ–≤—ã–π)"
echo "================================================================"

echo "üîÑ –ó–∞–ø—É—Å–∫ consumer –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π..."
cd python

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ ! -d "venv" ]; then
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    python3 -m venv venv
    source venv/bin/activate
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pip install -r requirements.txt
else
    source venv/bin/activate
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if ! python -c "import confluent_kafka" 2>/dev/null; then
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        pip install -r requirements.txt
    fi
fi

# –ó–∞–ø—É—Å–∫ consumer –≤ —Ñ–æ–Ω–µ
echo "üéØ –ó–∞–ø—É—Å–∫ consumer –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤: processed-events, analytics-events..."
nohup python3 test_consumer_confluent.py > consumer.log 2>&1 &
CONSUMER_PID=$!
echo "Consumer PID: $CONSUMER_PID"

cd ..

echo ""

echo "================================================================"
echo "        5. –ù–ê–°–¢–†–û–ô–ö–ê NIFI FLOW"
echo "================================================================"

echo "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ NiFi Flow:"
echo ""
echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/nifi"
echo "2. –í–æ–π–¥–∏—Ç–µ —Å credentials: admin / ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB"
echo "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ template –∏–∑ —Ñ–∞–π–ª–∞: templates/kafka_integration_flow.xml"
echo "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"
echo ""
echo "üéØ NiFi Flow –≤—ã–ø–æ–ª–Ω—è–µ—Ç:"
echo "   üì• ConsumeKafka - —á–∏—Ç–∞–µ—Ç –∏–∑ —Ç–æ–ø–∏–∫–∞ 'user-events'"
echo "   üîÑ UpdateAttribute - –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
echo "   üì§ PublishKafka - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ç–æ–ø–∏–∫ 'processed-events'"
echo "   üìù LogAttribute - –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
echo ""

echo "‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ NiFi Flow..."
read -p "üéØ NiFi Flow –Ω–∞—Å—Ç—Ä–æ–µ–Ω? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ NiFi Flow:"
    echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/nifi"
    echo "2. –õ–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB"
    echo "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ template: templates/kafka_integration_flow.xml"
    echo "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"
    echo "5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ"
    exit 1
fi

echo ""

echo "================================================================"
echo "        6. –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•"
echo "================================================================"

echo "üöÄ –ó–∞–ø—É—Å–∫ Python Producer –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π..."
cd python
source venv/bin/activate

echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Ç–æ–ø–∏–∫ 'user-events'..."
python3 test_producer_confluent.py

cd ..

echo ""

echo "================================================================"
echo "        7. –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í"
echo "================================================================"

echo "üìä –õ–æ–≥–∏ Apache NiFi:"
echo "(–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)"
docker logs apache-nifi --tail 20

echo ""
echo "üìä –õ–æ–≥–∏ Consumer (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è):"
echo "(–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)"
tail -20 python/consumer.log 2>/dev/null || echo "–õ–æ–≥–∏ consumer –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""

echo "================================================================"
echo "        8. –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–ô –ü–ï–†–ï–î–ê–ß–ò –î–ê–ù–ù–´–•"
echo "================================================================"

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ user-events:"
docker exec kafka-broker-1 kafka-console-consumer --bootstrap-server localhost:9092 --topic user-events --from-beginning --max-messages 5 --timeout-ms 10000

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ processed-events:"
docker exec kafka-broker-1 kafka-console-consumer --bootstrap-server localhost:9092 --topic processed-events --from-beginning --max-messages 5 --timeout-ms 10000

echo ""

echo "================================================================"
echo "        9. –í–ï–ë–ï–†–ò–Ø-–ò–ù–¢–ï–†–§–ï–ô–°–´ –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì"
echo "================================================================"

echo "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
echo ""
echo "1. üìä Kafka UI - http://localhost:8082"
echo "   - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
echo "   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∞—Å—Ç–µ—Ä–∞"
echo ""
echo "2. üîÑ Apache NiFi - http://localhost:8080/nifi"
echo "   - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"
echo "   - –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
echo "   - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
echo ""
echo "3. üóÇÔ∏è  Schema Registry - http://localhost:8081"
echo "   - curl http://localhost:8081/subjects"
echo "   - curl http://localhost:8081/config"
echo ""

echo "================================================================"
echo "        10. –°–ë–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
echo "================================================================"

echo "üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
echo "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç Docker Compose PS (—Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)"
echo "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç NiFi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º–∏"
echo "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç Kafka UI —Å —Ç–æ–ø–∏–∫–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"
echo "‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"
echo "‚úÖ –í—ã–≤–æ–¥ kafka-console-consumer —Å –¥–∞–Ω–Ω—ã–º–∏"
echo ""

echo "üìÅ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo "‚úÖ docker-compose.yml - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "‚úÖ templates/kafka_integration_flow.xml - NiFi Flow"
echo "‚úÖ python/test_producer_confluent.py - –∫–æ–¥ –ø—Ä–æ–¥—é—Å–µ—Ä–∞ (confluent-kafka)"
echo "‚úÖ python/test_consumer_confluent.py - –∫–æ–¥ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ (confluent-kafka)"
echo ""

echo "üìä –õ–æ–≥–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
echo "‚úÖ –õ–æ–≥–∏ NiFi: docker logs apache-nifi"
echo "‚úÖ –õ–æ–≥–∏ Consumer: python/consumer.log"
echo "‚úÖ –õ–æ–≥–∏ Kafka: docker logs kafka-broker-1"
echo ""

echo "================================================================"
echo "        –ó–ê–î–ê–ù–ò–ï 2 –í–´–ü–û–õ–ù–ï–ù–û!"
echo "================================================================"
echo ""
echo "üéâ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:"
echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Apache NiFi"
echo "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è NiFi —Å Kafka –∫–ª–∞—Å—Ç–µ—Ä–æ–º"
echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ NiFi Flow"
echo "‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–æ–ø–∏–∫–∞–º–∏"
echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"
echo ""
echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker compose down"
echo "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: docker compose logs [service_name]"
echo ""

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
echo $CONSUMER_PID > .consumer_pid

echo "üîÑ Consumer —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ (PID: $CONSUMER_PID)"
echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ consumer: kill $CONSUMER_PID" 