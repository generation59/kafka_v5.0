#!/usr/bin/env python3
"""
Test Producer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Kafka + NiFi
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–æ–ø–∏–∫ user-events –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ NiFi
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç confluent-kafka-python –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python 3.12
"""

import json
import time
import random
import uuid
from datetime import datetime
from typing import Dict, Any

from confluent_kafka import Producer
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class KafkaNiFiTestProducer:
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—é—Å–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Kafka –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ NiFi"""
    
    def __init__(self, bootstrap_servers: str, topic: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        
        Args:
            bootstrap_servers: –ê–¥—Ä–µ—Å–∞ Kafka –±—Ä–æ–∫–µ—Ä–æ–≤
            topic: –ò–º—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        self.topic = topic
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.producer = Producer({
            'bootstrap.servers': bootstrap_servers,
            'acks': 'all',  # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö —Ä–µ–ø–ª–∏–∫
            'retries': 3,
            'batch.size': 16384,
            'linger.ms': 10,
            'compression.type': 'snappy',
            'max.in.flight.requests.per.connection': 1,
            'enable.idempotence': True
        })
        
        logger.info(f"–ü—Ä–æ–¥—é—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–ø–∏–∫–∞ '{topic}'")
        logger.info(f"Bootstrap —Å–µ—Ä–≤–µ—Ä—ã: {bootstrap_servers}")

    def generate_user_event(self, event_type: str = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        
        event_types = ['LOGIN', 'LOGOUT', 'PURCHASE', 'VIEW_PRODUCT', 'ADD_TO_CART', 'REGISTER']
        users = [f"user_{i}" for i in range(1, 21)]  # 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        products = [f"product_{i}" for i in range(1, 51)]  # 50 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        
        user_id = random.choice(users)
        if not event_type:
            event_type = random.choice(event_types)
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event = {
            'userId': user_id,
            'eventType': event_type,
            'timestamp': int(time.time() * 1000),
            'sessionId': str(uuid.uuid4()),
            'userAgent': f'Mozilla/5.0 (TestAgent {random.randint(1, 100)})',
            'ipAddress': f"192.168.{random.randint(1, 255)}.{random.randint(1, 255)}",
            'metadata': {
                'source': 'test_producer',
                'version': '2.0',
                'environment': 'integration_test'
            }
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if event_type in ['PURCHASE', 'VIEW_PRODUCT', 'ADD_TO_CART']:
            event['productId'] = random.choice(products)
            
        if event_type == 'PURCHASE':
            event['amount'] = round(random.uniform(10.0, 1000.0), 2)
            event['currency'] = 'USD'
            
        if event_type == 'VIEW_PRODUCT':
            event['viewDuration'] = random.randint(10, 300)  # —Å–µ–∫—É–Ω–¥—ã
            
        if event_type == 'REGISTER':
            event['email'] = f"{user_id}@example.com"
            event['source'] = random.choice(['web', 'mobile', 'api'])
            
        return event

    def delivery_report(self, err, msg):
        """Callback –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if err is not None:
            logger.error(f'‚úó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {err}')
        else:
            logger.info(f'‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {msg.topic()}, '
                       f'–ø–∞—Ä—Ç–∏—Ü–∏—è {msg.partition()}, offset {msg.offset()}')

    def send_event(self, event: Dict[str, Any], key: str = None) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ Kafka"""
        
        if not key:
            key = event['userId']
            
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON
            value = json.dumps(event, ensure_ascii=False).encode('utf-8')
            key_bytes = key.encode('utf-8') if key else None
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.producer.produce(
                topic=self.topic,
                key=key_bytes,
                value=value,
                callback=self.delivery_report
            )
            
            # –¢—Ä–∏–≥–≥–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ callbacks
            self.producer.poll(0)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event['eventType']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event['userId']}")
            
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    def send_batch_events(self, count: int = 50, delay: float = 1.0):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        logger.info(f"\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è NiFi ===")
        
        event_types = ['LOGIN', 'LOGOUT', 'PURCHASE', 'VIEW_PRODUCT', 'ADD_TO_CART', 'REGISTER']
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        type_distribution = {
            'VIEW_PRODUCT': 0.4,  # 40% –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            'LOGIN': 0.2,         # 20% –≤—Ö–æ–¥–æ–≤
            'PURCHASE': 0.15,     # 15% –ø–æ–∫—É–ø–æ–∫
            'ADD_TO_CART': 0.15,  # 15% –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É
            'LOGOUT': 0.05,       # 5% –≤—ã—Ö–æ–¥–æ–≤
            'REGISTER': 0.05      # 5% —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        }
        
        events_sent = 0
        
        for i in range(count):
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
            rand = random.random()
            cumulative = 0
            selected_type = 'VIEW_PRODUCT'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            for event_type, probability in type_distribution.items():
                cumulative += probability
                if rand <= cumulative:
                    selected_type = event_type
                    break
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
            event = self.generate_user_event(selected_type)
            self.send_event(event)
            
            events_sent += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–æ–±—ã—Ç–∏–π
            if events_sent % 10 == 0:
                logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {events_sent}/{count} —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            if delay > 0:
                time.sleep(delay)
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.producer.flush()
        logger.info(f"\n‚úì –í—Å–µ {count} —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")

    def send_continuous_events(self, events_per_minute: int = 30, duration_minutes: int = 5):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        logger.info(f"\n=== –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π ===")
        logger.info(f"–°–∫–æ—Ä–æ—Å—Ç—å: {events_per_minute} —Å–æ–±—ã—Ç–∏–π/–º–∏–Ω—É—Ç—É")
        logger.info(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω—É—Ç")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        interval = 60.0 / events_per_minute  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        total_events = events_per_minute * duration_minutes
        events_sent = 0
        start_time = time.time()
        
        try:
            while events_sent < total_events:
                event = self.generate_user_event()
                self.send_event(event)
                events_sent += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 20 —Å–æ–±—ã—Ç–∏–π
                if events_sent % 20 == 0:
                    elapsed = time.time() - start_time
                    rate = events_sent / elapsed * 60  # —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç—É
                    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {events_sent}/{total_events} —Å–æ–±—ã—Ç–∏–π, "
                               f"—Å–∫–æ—Ä–æ—Å—Ç—å: {rate:.1f} —Å–æ–±—ã—Ç–∏–π/–º–∏–Ω")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
                if interval > 0:
                    time.sleep(interval)
                    
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.producer.flush()
        logger.info(f"\n‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {events_sent} —Å–æ–±—ã—Ç–∏–π")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä–∞"""
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä–∞...")
        self.producer.flush()
        logger.info("‚úì –ü—Ä–æ–¥—é—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Docker Compose
        bootstrap_servers = 'localhost:9092,localhost:9093,localhost:9094'
        topic = 'user-events'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
        producer = KafkaNiFiTestProducer(bootstrap_servers, topic)
        
        logger.info("\nüéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
        logger.info("1. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        logger.info("2. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π")
        
        mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2) [1]: ").strip() or "1"
        
        if mode == "1":
            count = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π [50]: ").strip()
            count = int(count) if count.isdigit() else 50
            
            delay = input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ —Å–µ–∫ [1.0]: ").strip()
            delay = float(delay) if delay else 1.0
            
            producer.send_batch_events(count, delay)
            
        elif mode == "2":
            rate = input("–°–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç—É [30]: ").strip()
            rate = int(rate) if rate.isdigit() else 30
            
            duration = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö [5]: ").strip()
            duration = int(duration) if duration.isdigit() else 5
            
            producer.send_continuous_events(rate, duration)
        
        producer.close()
        
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 