#!/usr/bin/env python3
"""
Test Consumer –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Kafka + NiFi
–ß–∏—Ç–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–æ–ø–∏–∫–æ–≤ processed-events, analytics-events –∏ —Ç.–¥.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç confluent-kafka-python –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python 3.12
"""

import json
import time
import signal
import sys
from datetime import datetime
from typing import Dict, Any, List
from collections import defaultdict

from confluent_kafka import Consumer, KafkaError
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class KafkaNiFiTestConsumer:
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ NiFi"""
    
    def __init__(self, bootstrap_servers: str, topics: List[str], group_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
        
        Args:
            bootstrap_servers: –ê–¥—Ä–µ—Å–∞ Kafka –±—Ä–æ–∫–µ—Ä–æ–≤
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è
            group_id: ID –≥—Ä—É–ø–ø—ã –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤
        """
        self.topics = topics
        self.group_id = group_id
        self.running = True
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_messages': 0,
            'messages_by_topic': defaultdict(int),
            'messages_by_type': defaultdict(int),
            'errors': 0,
            'start_time': time.time()
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
        self.consumer = Consumer({
            'bootstrap.servers': bootstrap_servers,
            'group.id': group_id,
            'auto.offset.reset': 'latest',  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            'enable.auto.commit': True,
            'auto.commit.interval.ms': 1000,
            'session.timeout.ms': 30000,
            'heartbeat.interval.ms': 10000,
            'max.poll.interval.ms': 300000,
            'fetch.min.bytes': 1,
            'fetch.wait.max.ms': 500
        })
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
        self.consumer.subscribe(topics)
        
        logger.info(f"–ö–æ–Ω—Å—å—é–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤: {topics}")
        logger.info(f"–ì—Ä—É–ø–ø–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤: {group_id}")
        logger.info(f"Bootstrap —Å–µ—Ä–≤–µ—Ä—ã: {bootstrap_servers}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—å—é–º–µ—Ä...")
        self.running = False

    def process_message(self, message) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Kafka
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            topic = message.topic()
            partition = message.partition()
            offset = message.offset()
            key = message.key()
            value = message.value()
            timestamp = message.timestamp()
            
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
            key_str = key.decode('utf-8') if key else None
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –∑–Ω–∞—á–µ–Ω–∏—è
            value_dict = None
            if value:
                try:
                    value_dict = json.loads(value.decode('utf-8'))
                except json.JSONDecodeError:
                    value_dict = {'raw_message': value.decode('utf-8', errors='ignore')}
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats['total_messages'] += 1
            self.stats['messages_by_topic'][topic] += 1
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            event_type = None
            if isinstance(value_dict, dict):
                event_type = value_dict.get('eventType', 'UNKNOWN')
                self.stats['messages_by_type'][event_type] += 1
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NiFi)
            processing_time = None
            if isinstance(value_dict, dict) and 'nifi.processing.timestamp' in value_dict:
                try:
                    processing_timestamp = int(value_dict['nifi.processing.timestamp'])
                    original_timestamp = value_dict.get('timestamp', int(time.time() * 1000))
                    processing_time = processing_timestamp - original_timestamp
                except (ValueError, TypeError):
                    pass
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
            timestamp_type, timestamp_value = timestamp
            if timestamp_type == 1:  # CREATE_TIME
                timestamp_str = datetime.fromtimestamp(timestamp_value / 1000).strftime('%H:%M:%S.%f')[:-3]
            else:
                timestamp_str = 'N/A'
            
            logger.info(f"üì® [{timestamp_str}] –¢–æ–ø–∏–∫: {topic}")
            logger.info(f"   üìç –ü–∞—Ä—Ç–∏—Ü–∏—è: {partition}, Offset: {offset}")
            logger.info(f"   üîë –ö–ª—é—á: {key_str}")
            
            if event_type:
                logger.info(f"   üìä –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
            
            if processing_time:
                logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ NiFi: {processing_time}ms")
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —ç—Ç–æ JSON)
            if isinstance(value_dict, dict):
                logger.info(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {self._format_message_data(value_dict)}")
            else:
                logger.info(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {value_dict}")
            
            logger.info("-" * 60)
            
            return True
            
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors'] += 1
            return False

    def _format_message_data(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        important_fields = [
            'userId', 'eventType', 'timestamp', 'sessionId', 
            'productId', 'amount', 'source.topic', 'source.partition', 
            'nifi.processing.timestamp', 'nifi.processor.name'
        ]
        
        formatted_parts = []
        
        for field in important_fields:
            if field in data:
                value = data[field]
                if field == 'timestamp' or field == 'nifi.processing.timestamp':
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    try:
                        ts = int(value) / 1000
                        readable_time = datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
                        formatted_parts.append(f"{field}={readable_time}")
                    except:
                        formatted_parts.append(f"{field}={value}")
                else:
                    formatted_parts.append(f"{field}={value}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        other_fields = {k: v for k, v in data.items() if k not in important_fields}
        if other_fields:
            other_str = ", ".join([f"{k}={v}" for k, v in other_fields.items() if not k.startswith('_')])
            if other_str:
                formatted_parts.append(f"other: {other_str}")
        
        return " | ".join(formatted_parts)

    def print_statistics(self):
        """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        elapsed = time.time() - self.stats['start_time']
        rate = self.stats['total_messages'] / elapsed if elapsed > 0 else 0
        
        logger.info("\n" + "=" * 50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–°–¨–Æ–ú–ï–†–ê")
        logger.info("=" * 50)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üì¶ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_messages']}")
        logger.info(f"üìà –°–∫–æ—Ä–æ—Å—Ç—å: {rate:.2f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        if self.stats['messages_by_topic']:
            logger.info("\nüìã –ü–æ —Ç–æ–ø–∏–∫–∞–º:")
            for topic, count in self.stats['messages_by_topic'].items():
                percentage = (count / self.stats['total_messages']) * 100 if self.stats['total_messages'] > 0 else 0
                logger.info(f"   {topic}: {count} ({percentage:.1f}%)")
        
        if self.stats['messages_by_type']:
            logger.info("\nüìä –ü–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π:")
            for event_type, count in self.stats['messages_by_type'].items():
                percentage = (count / self.stats['total_messages']) * 100 if self.stats['total_messages'] > 0 else 0
                logger.info(f"   {event_type}: {count} ({percentage:.1f}%)")

    def consume_messages(self, timeout_sec: int = None):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            timeout_sec: –¢–∞–π–º–∞—É—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (None –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã)
        """
        logger.info(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–æ–≤: {self.topics}")
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        end_time = None
        if timeout_sec:
            end_time = time.time() + timeout_sec
            logger.info(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ {timeout_sec} —Å–µ–∫—É–Ω–¥")
        
        try:
            while self.running:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                if end_time and time.time() > end_time:
                    logger.info("‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—å—é–º–µ—Ä")
                    break
                
                # –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                msg = self.consumer.poll(1.0)  # timeout 1 —Å–µ–∫—É–Ω–¥–∞
                
                if msg is None:
                    continue
                
                if msg.error():
                    if msg.error().code() == KafkaError._PARTITION_EOF:
                        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ø–∞—Ä—Ç–∏—Ü–∏–∏
                        logger.debug(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ø–∞—Ä—Ç–∏—Ü–∏–∏ {msg.topic()}[{msg.partition()}]")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞: {msg.error()}")
                        self.stats['errors'] += 1
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.process_message(msg)
                
                # –ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                if self.stats['total_messages'] > 0 and self.stats['total_messages'] % 50 == 0:
                    self.print_statistics()
                    
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.print_statistics()
            self.close()

    def check_topics_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–æ–≤"""
        try:
            metadata = self.consumer.list_topics(timeout=10)
            available_topics = set(metadata.topics.keys())
            
            logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–ø–∏–∫–∏: {sorted(available_topics)}")
            
            missing_topics = set(self.topics) - available_topics
            if missing_topics:
                logger.warning(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–ø–∏–∫–∏: {missing_topics}")
                return False
            else:
                logger.info("‚úÖ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ç–æ–ø–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø–∏–∫–æ–≤: {e}")
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞"""
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞...")
        self.consumer.close()
        logger.info("‚úì –ö–æ–Ω—Å—å—é–º–µ—Ä –∑–∞–∫—Ä—ã—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Docker Compose
        bootstrap_servers = 'localhost:9092,localhost:9093,localhost:9094'
        topics = ['processed-events', 'analytics-events', 'purchase-events']
        group_id = 'nifi-test-consumer-group'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
        consumer = KafkaNiFiTestConsumer(bootstrap_servers, topics, group_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–æ–≤
        if not consumer.check_topics_availability():
            logger.warning("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ø–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        logger.info("\nüéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
        logger.info("1. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        logger.info("2. –ß—Ç–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º")
        
        mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2) [1]: ").strip() or "1"
        
        if mode == "1":
            consumer.consume_messages()
        elif mode == "2":
            timeout = input("–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö [60]: ").strip()
            timeout = int(timeout) if timeout.isdigit() else 60
            consumer.consume_messages(timeout)
        
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 