#!/usr/bin/env python3
"""
Yandex Cloud Kafka Consumer using confluent-kafka-python
Supports SASL_SSL authentication with Avro and JSON
"""

import json
import logging
import signal
import sys
from confluent_kafka import Consumer, KafkaError
import avro.schema
import avro.io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class YandexKafkaConsumer:
    def __init__(self, config_file='../../yandex_cloud_config.properties'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer –¥–ª—è Yandex Cloud Kafka"""
        self.config = self._load_config(config_file)
        self.consumer = Consumer(self.config)
        self.avro_schema = self._load_avro_schema()
        self.running = True
        
    def _load_config(self, config_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        config = {}
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è confluent-kafka-python
        supported_keys = {
            'bootstrap.servers', 'security.protocol', 'sasl.mechanism', 
            'sasl.username', 'sasl.password', 'ssl.ca.location',
            'request.timeout.ms', 'session.timeout.ms', 'heartbeat.interval.ms',
            'retry.backoff.ms', 'auto.offset.reset', 'enable.auto.commit',
            'auto.commit.interval.ms', 'group.id'
        }
        
        try:
            with open(config_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç —Å —Ç–æ—á–∫–∞–º–∏
                        key = key.strip().replace('_', '.')
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        if key in supported_keys:
                            config[key] = value.strip()
                        else:
                            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {key}")
        except FileNotFoundError:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
            # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config = {
                'bootstrap.servers': 'rc1a-v063i1touj4ue341.mdb.yandexcloud.net:9091',
                'security.protocol': 'SASL_SSL',
                'sasl.mechanism': 'SCRAM-SHA-512',
                'sasl.username': 'kafka_user',
                'sasl.password': 'kafka_password',
                'ssl.ca.location': '/usr/local/share/ca-certificates/Yandex/YandexInternalRootCA.crt'
            }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ consumer
        config.update({
            'group.id': 'yandex-consumer-group',
            'auto.offset.reset': 'earliest',
            'enable.auto.commit': True,
            'auto.commit.interval.ms': 5000
        })
        
        return config
    
    def _load_avro_schema(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Avro —Å—Ö–µ–º—ã"""
        try:
            with open('../schemas/user-event.avsc', 'r') as f:
                schema_dict = json.load(f)
            return avro.schema.parse(json.dumps(schema_dict))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Avro —Å—Ö–µ–º—É: {e}")
            return None
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_data = json.loads(message.value().decode('utf-8'))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ Avro —Å—Ö–µ–º–µ
            if self.avro_schema:
                try:
                    self._validate_message(message_data)
                    logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é Avro")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Avro: {e}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            logger.info("=" * 50)
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            logger.info(f"   –¢–æ–ø–∏–∫: {message.topic()}")
            logger.info(f"   –ü–∞—Ä—Ç–∏—Ü–∏—è: {message.partition()}")
            logger.info(f"   Offset: {message.offset()}")
            logger.info(f"   –ö–ª—é—á: {message.key()}")
            logger.info(f"   Timestamp: {message.timestamp()}")
            logger.info(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(message_data, indent=2, ensure_ascii=False)}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            event_type = message_data.get('eventType', 'unknown')
            user_id = message_data.get('userId', 'unknown')
            
            if event_type == 'login':
                logger.info(f"üîë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            elif event_type == 'page_view':
                logger.info(f"üëÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            elif event_type == 'purchase':
                logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            else:
                logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è '{event_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            
            logger.info("=" * 50)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.error(f"–°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.value()}")
    
    def _validate_message(self, message_data):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Avro —Å—Ö–µ–º–µ"""
        required_fields = ['userId', 'eventType', 'timestamp']
        for field in required_fields:
            if field not in message_data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
    
    def consume_messages(self, topics):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏
            self.consumer.subscribe(topics)
            logger.info(f"üîå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫–∏: {topics}")
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)
            
            while self.running:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    msg = self.consumer.poll(timeout=1.0)
                    
                    if msg is None:
                        continue
                    
                    if msg.error():
                        if msg.error().code() == KafkaError._PARTITION_EOF:
                            logger.info(f"üìç –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ø–∞—Ä—Ç–∏—Ü–∏–∏ {msg.partition()}")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Consumer: {msg.error()}")
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.process_message(msg)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ consumer: {e}")
            raise
        finally:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ consumer
            self.consumer.close()
            logger.info("üîå Consumer –∑–∞–∫—Ä—ã—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    topics = ['test']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ test
    consumer = YandexKafkaConsumer()
    
    try:
        consumer.consume_messages(topics)
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 